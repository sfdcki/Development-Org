    map:{
        svgFile:'../svg/world.svg', // path to SVG map, default value false
        title:'Coloring Map Areas', // title of map, default value ''
        useGroup:true,              // using group color for classification, default value false
        width:'400px',              // width of the map container, default value '250px'
        height:'600px',             // height of the map container, default value '350px'
        fill:'#FF0000',             // default filling color map area (RGB or general name of color), default value '#dddddd'
        stroke:'#000',           // stroke color map area (RGB or general name of color), default value '#aaaaaa'
        strokeWidth:'0.5px',        // stroke width map area, default value '1px'
        hoverFill:'yellow',         // change color on hover, value can be set rgb color (ex: '#FF0000') or change brightness in interval -1 < value < 1 that negative value is decrease brightness, default value 0.1
        hoverStroke:'blue',         // change stroke color on hover, value can be set rgb color (ex: '#FF0000'), default value '#aaaaaa'
        hoverStrokeWidth:'2px',     // change stroke width on hover, default value '1px'
        selected:false,             // enable or disable selected area when onClick event handlers is set, default value true
        selectedFill:'yellow',      // change color on selected, value can be set rgb color (ex: '#FF0000') or change brightness in interval -1 < value < 1 that negative value is decrease brightness, default value -0.2
        selectedStroke:'#0000FF',   // change stroke color on selected, default value '#aaaaaa'
        selectedStrokeWidth:'2px',  // change stroke width on selected, default value '1px'
        showTooltip:true,           // show custom text defined in each region's data parameters as shown below, default value false
        pan:true,                   // enable panning (clik & hold left mouse button, then move), default value true
        responsive:true,            // set fluid size, automatically adjusting to small screens, don't forget to set width and/or height, because these will be used as limiting 'max-width' and 'max-height', default value true
        download:true,              // show or hide export/print buttons, default value true
        zoom:true,                  // enable zooming, default value true
        zoomButtons:{
            'show':true,            // true or false = show or hide zoom buttons (dafault is "true", also buttons can be visible only if zoom is turned ON)
            'location':'bl',        // 'tl' --> top left, 'tr' --> top right, 'bl' --> bottom left, 'br' --> bottom right, default value 'bl'
            'orientation':'h'       // 'h' --> horizontal, 'v' --> vertical, default value 'h'
        },
    loader: {
            'type':'bar', // bar, bounce, text
            'color':'#999999', // loader color
            'text':'Loading ...' // loader text for type bar
        },
        devMode: false, // true or false
        // all of types can has tooltip, href, newtab, onClick event
        markers: [ // additional elements
            {
                type: 'rect', // represents a rectangle
                attr: {
                    id: 'rect1', // element id will be generated by system if value not set
                    coordinates: [100,200], // [x, y], the location of the rectangle is determined by the x and y attributes
                    size: [100,100], // [width, height], the size of the rectangle is determined by the width and height attributes
                    rcorner: [10,10], // [rx, ry], the attributes rx and ry determine how round the corners will be
                    style: {
                        'fill': 'none', // color or none
                        'fill-opacity': 1, // 0 - 1
                        'stroke': 'red', // color or none
                        'stroke-width': '2px', // stroke width
                        'stroke-dasharray': '10 5',  // the values define the length of dashes and spaces
                        'stroke-opacity': 1,  // 0 - 1
                        'opacity': 1 // 0 - 1
                    }
                },
                tooltip: '<strong>Custom tooltip</strong><br/>Data information..', // tooltip text when hovering element
                href: 'http://www.google.com', // goto url when element is clicked
                newtab: true, // open url in new tab
                onClick:function(event,data){ // action when element is clicked
                    alert(data.id); // event - javascript's event object
                                    // data - additional information that defined in each element, such as: data.id, data.elem
                }
            },
            {
                type: 'circle', // is used to draw circles
                attr: {
                    id: 'circle1', // element id will be generated by system if value not set
                    coordinates: [113.32,490.70], // [cx, cy], the location of the circle is centered in cx , cy
                    radius: 24, // radius
                    style: {
                        'fill': 'none',
                        'fill-opacity': 1,
                        'stroke': 'red',
                        'stroke-width': '2px',
                        'stroke-dasharray': '10 5',
                        'stroke-opacity': 1,
                        'opacity': 1
                    }
                }
            },
            {
                type: 'ellipse', // is used to draw ellipses
                attr: {
                    id: 'ellipse1', // element id will be generated by system if value not set
                    coordinates: [500,100], // // [cx, cy], the location of the ellipse is centered in cx , cy
                    radius: [50,25], // the radius in the x and y directions
                    style: {
                        'fill': 'none',
                        'fill-opacity': 1,
                        'stroke': 'red',
                        'stroke-width': '2px',
                        'stroke-dasharray': '10 5',  
                        'stroke-opacity': 1,  
                        'opacity': 1
                    }
                }
            },
            {
                type: 'line', // is used to draw lines
                attr: {
                    id: 'line1', // element id will be generated by system if value not set
                    coordinates: [[100,150], [500,150]], // [[x1,y1], [x2,y2]] The line begins at the point set by the x1 and y1 attributes. The line ends at the point set by the x2 and y2 attributes.
                    style: {
                        'fill': 'none',
                        'fill-opacity': 1,
                        'stroke': 'red',
                        'stroke-width': '2px',
                        'stroke-dasharray': '10 5',
                        'stroke-opacity': 1,
                        'opacity': 1
                    }
                }
            },
            {
                type: 'polyline', // is used to draw multiple connected lines (poly = multiple).
                attr: {
                    id: 'polyline1', // element id will be generated by system if value not set
                    coordinates: [[400,300], [800,300], [600,500], [400,300]], // [x,y] The multiple lines are identified by points. Each point is listed as x,y in the points attribute.
                    style: {
                        'fill': 'none',
                        'fill-opacity': 1,
                        'stroke': 'red',
                        'stroke-width': '2px',
                        'stroke-dasharray': '10 5',  
                        'stroke-opacity': 1,
                        'opacity': 1
                    }
                }
            },
            {
                type: 'polygon', // is used to draw shapes with multiple (3 or more) sides / edges.
                attr: {
                    id: 'polygon1', // element id will be generated by system if value not set
                    coordinates: [[50,5],   [100,5],  [125,30],  [125,80], [100,105],
                        [50,105],  [25,80],  [25, 30]], // [x,y]  element draws lines between all points, including a line from the last point back to the first
                    style: {
                        'fill': '#cc3333',
                        'fill-opacity': 1,
                        'stroke': '#660000',
                        'stroke-width': '3px',
                        'stroke-dasharray': '10 5',
                        'stroke-opacity': 1,
                        'opacity': 1
                    }
                }
            },
            {
                type: 'path', //  is used to draw advanced shapes combined from lines, arcs, curves etc
                attr: {
                    drawing: 'M40,20  A30,30 0 0,0 70,70', // All drawing with the <path> element is specified inside the d attribute. The d attribute contains drawing commands.
                    style: {
                        'fill': 'none',
                        'stroke': '#cccc00',
                        'stroke-width': '2px'
                    }
                }
            },
            {
                type: 'text', // is used to draw text
                value: 'hello world', // text displayed
                attr: {
                    coordinates: [250,250], // [x, y] The position of the text is determined by the x and y attributes. The x-attribute determines where to locate the left edge of the text (the start of the text). The y-attribute determines where to locate the bottom of the text (not the top).
                    transform: 'rotate(45, 250, 250)', // [degree, x, y]
                    textLength: 200, // The length of the text is then made to fit the specified length by adjusting the space between the characters, and the size of the glyphs.
                    lengthAdjust: 'spacingAndGlyphs', // spacing or spacingAndGlyphs, Using the lengthAdjust attribute you can specify if both letter spacing and glyph size should be adjusted.  
                    style: {
                        'font-size': '20px', // font size
                        'font-family': 'Verdana', // arial or verdana
                        'text-decoration': 'line-through', // Can be any of none, underline, overline and line-through.
                        'text-anchor': 'middle', // start, middle, end
                        'fill': 'none',
                        'stroke': '#0000ff',
                        'direction': 'rtl', // The direction property can take two values: ltr and rtl. These values means "Left To Right" and "Right To Left".
                        'unicode-bidi': 'bidi-override', // You also have to set the unicode-bidi CSS property to bidi-override.
                    }
                }
            },
            {
                type: 'image', // is used to embed images inside your SVG
                attr: {
                    coordinates: [430,498], // [x, y] the location of the image is determined by the x and y attributes
                    size: [32,32], // [width, height] the size of the image is determined by the width and height attributes
                    url: '../pin/32px/pin_maps3.png', // image url can use static url (eg: http://www.image.com/pin.png) or dynamic url
                },
                tooltip: '<strong>Custom tooltip</strong><br/>Data information..',
            }
        ],
        // pattern fill
        patterns: [
            {
                id: "pattern1", // pattern id
                coordinates: [10,10], // [x,y], The x and y attributes of the <pattern> element defines how far into the shape in the <pattern> element the pattern starts.
                size: [20,20], // [width,height], The width and height attributes of the <pattern> element defines the width and height of the pattern.
                patternTransform: 'rotate(35)', // You can transform fill patterns using the standard SVG transformation functions
                objectActive: { // active pattern object
                    type: 'circle',
                    attr: {
                        coordinates: [10,10],
                        radius: 10,
                        style: {
                            'fill': '#0000ff',
                            'stroke': 'none'
                        }
                    }
                },
                objectHover: { // hover pattern object
                    type: 'circle',
                    attr: {
                        coordinates: [10,10],
                        radius: 10,
                        style: {
                            'fill': 'orange',
                            'stroke': 'none'
                        }
                    }
                }
            },
            {
                id: "pattern2",
                coordinates: [10,10], // [x,y], The x and y attributes of the <pattern> element defines how far into the shape in the <pattern> element the pattern starts.
                size: [20,20], // [width,height], The width and height attributes of the <pattern> element defines the width and height of the pattern.
                //patternTransform: 'rotate(35)',
                objectActive: {
                    type: 'rect',
                    attr: {
                        coordinates: [0,0],
                        size: [15,15],
                        rcorner: [2,2],
                        style: {
                            'fill': 'none',
                            'stroke': '#0000ff'
                        }
                    }
                },
                objectHover: {
                    type: 'rect',
                    attr: {
                        coordinates: [0,0],
                        size: [15,15],
                        rcorner: [2,2],
                        style: {
                            'fill': 'none',
                            'stroke': 'orange'
                        }
                    }
                }
            },
            {
                id: "pattern3",
                coordinates: [0,0], // [x,y], The x and y attributes of the <pattern> element defines how far into the shape in the <pattern> element the pattern starts.
                size: [20,20], // [width,height], The width and height attributes of the <pattern> element defines the width and height of the pattern.
                //patternTransform: 'rotate(35)',
                objectActive: {
                    type: 'line',
                    attr: {
                        coordinates: [[0,20], [20,0]],
                        style: {
                            'stroke': '#0000ff'
                        }
                    }
                },
                objectHover: {
                    type: 'line',
                    attr: {
                        coordinates: [[0,20], [20,0]],
                        style: {
                            'stroke': 'orange'
                        }
                    }
                }
            },
            {
                id: "pattern4",
                coordinates: [0,0], // [x,y], The x and y attributes of the <pattern> element defines how far into the shape in the <pattern> element the pattern starts.
                size: [20,20], // [width,height], The width and height attributes of the <pattern> element defines the width and height of the pattern.
                //patternTransform: 'rotate(35)',
                objectActive: {
                    type: 'polygon',
                    attr: {
                        coordinates: [[0,15], [7.5,0], [15,15]],
                        style: {
                            'fill': 'none',
                            'stroke': '#0000ff'
                        }
                    }
                },
                objectHover: {
                    type: 'polygon',
                    attr: {
                        coordinates: [[0,15], [7.5,0], [15,15]],
                        style: {
                            'fill': 'none',
                            'stroke': 'orange'
                        }
                    }
                }
            },
            {
                id: "pattern5",
                coordinates: [0,0], // [x,y], The x and y attributes of the <pattern> element defines how far into the shape in the <pattern> element the pattern starts.
                size: [38,44], // [width,height], The width and height attributes of the <pattern> element defines the width and height of the pattern.
                //patternTransform: 'rotate(35)',
                objectActive: {
                    type: 'image',
                    attr: {
                        coordinates: [0,0],
                        size: [38,44],
                        url: 'http://danukidd.byethost3.com/demo/statmapsvg/Docs&Demo/demo/images/pattern3.png',
                    }
                },
                objectHover: {
                    type: 'image',
                    attr: {
                        coordinates: [0,0],
                        size: [38,44],
                        url: 'http://danukidd.byethost3.com/demo/statmapsvg/Docs&Demo/demo/images/pattern3_hover.png',
                    }
                }
            },
            {
                id: "pattern6",
                coordinates: [0,0], // [x,y], The x and y attributes of the <pattern> element defines how far into the shape in the <pattern> element the pattern starts.
                size: [38,65], // [width,height], The width and height attributes of the <pattern> element defines the width and height of the pattern.
                //patternTransform: 'rotate(35)',
                objectActive: {
                    type: 'image',
                    attr: {
                        coordinates: [0,0],
                        size: [38,65],
                        url: 'http://danukidd.byethost3.com/demo/statmapsvg/Docs&Demo/demo/images/pattern2.png',
                    }
                }
            },
            {
                id: "pattern7",
                coordinates: [0,0], // [x,y], The x and y attributes of the <pattern> element defines how far into the shape in the <pattern> element the pattern starts.
                size: [150,124], // [width,height], The width and height attributes of the <pattern> element defines the width and height of the pattern.
                //patternTransform: 'rotate(35)',
                objectActive: {
                    type: 'image',
                    attr: {
                        coordinates: [0,0],
                        size: [150,124],
                        url: 'http://danukidd.byethost3.com/demo/statmapsvg/Docs&Demo/demo/images/pattern1.png',
                    }
                }
            }
        ],
    // gradient for fill color or stroke
        gradients: [
            {
                id: 'gradient1', // A unique ID used to reference this gradient definition from shapes.
                type: 'linear', // linear or radial, Linear gradients changes evenly from one color to another in a linear fashion
                attr: {
                    startPoint: ['0%','0%'], // [x1,y1], The x1 and y1 (starting point) of the vector defining the direction of the gradient. Specified as percentages (%) of x1,y1 and x2,y2 of the shape the gradient is applied to.
                    endPoint: ['0%','100%'], // [x2,y2], The x2 and y2 (end point) of the vector defining the direction of the gradient.
                    spreadMethod: 'pad', // There are 3 possible values: pad, repeat, and reflect. 'pad' means that the first/last color of the gradient is padded (spread out) before and after the gradient. ''repeat' means that the gradient is repeated throughout the shape. 'reflect' means that gradient is mirrored in the shape. The spread method is only relevant if the gradient does not fill out the shape completely (see offset attributes of the <stop> elements)
                    //gradientTransform: 'rotate(45)' // You can transform (e.g. rotate) the gradient before it is applied
                },
                stops: [
                    {
                        'offset' : '0%', // How far into the shape this color starts (if the first color of the gradient) or stops (if the last color of the gradient). Specified as percentages of the shape (really the gradient vector) the gradient is applied to. For instance, 10% means that the color should start / stop 10% into the shape.
                        'stop-color' : 'red', // The color of this stop-point. The color the gradient changes from / to.
                        'stop-opacity' : '1' // The opacity of the color of this stop-point. If opacity changes from one stop-point with 1 to another stop-point with opacity 0, then the color will gradually become more and more transparent.
                    },
                    {
                        'offset' : '100%',
                        'stop-color' : 'yellow',
                        'stop-opacity' : '1'
                    }
                ]
            },
            {
                id: 'gradient2',
                type: 'radial', // linear or radial, Radial gradients are gradients in which the colors change circularly rather than linearly
                attr: {
                    center: ['50%','50%'], // [cx,cy], The x and y of the center of the radial gradient. Specified as percentages of width and height of shape to fill. Both defaults to 50% if omitted.
                    focalPoint: ['5%','5%'], // [fx,fy], The x and y of the focal point of the radial gradient. Specified as percentages of width and height of shape to fill.
                    radius: '60%', // radius in percent, The radius of the gradient.
                    spreadMethod: 'pad', // There are 3 possible values: pad, repeat, and reflect
                    //gradientTransform: 'rotate(45)'
                },
                stops: [
                    {
                        'offset' : '0%',
                        'stop-color' : 'red',
                        'stop-opacity' : '1'
                    },
                    {
                        'offset' : '100%',
                        'stop-color' : 'yellow',
                        'stop-opacity' : '1'
                    }
                ]
            }
        ],
        funcs: {
            // set custom onClick, mouseOver, mouseOut, mouseMove event handlers for all region
            // event - javascript's event object
            // data - additional information that defined in each region, such as: data.id, data.nm, data.value, etc
            onClick: function(event, data){ },
            mouseOver: function(event, data){ },
            mouseOut: function(event, data){ },
            mouseMove: function(event, data){ }
        }  
    }

Setting Data Options:

    data: {
        area:{                                      // setting region parameters
            'IDN':                                  // attribut id on tag path/g in svg for each region
            {
                nm:'Indonesia',                     // set name for each region that display in legend
                value:'10',                         // set value for each region that display in legend
                color: '#00ff00',                   // set fill color for each region
                tooltip: '<strong>tool</strong>tip',// set content for tooltip, default show nm and value. Tooltip is just a DIV container with HTML, so you can set any html content to it - any html tags, images, even youtube video
                groupId: 'asia',                    // set groupId for each region for grouping that display in legend
                addVar: 'This Is Custom Data',      // add more custom additional data with any variable name and value {[customDataVar]: [custom data value]}
                // set custom onClick, mouseOver, mouseOut, mouseMove event handlers for each region
                // event - javascript's event object
                // data - additional information that defined in each region, such as: data.id, data.nm, data.value, etc
                onClick:function(event,data){
                    var id=data.id;                 // get id
                    var nm=data.nm;                 // get name
                    var value=data.value;           // get value
                    var color=data.color;           // get color
                    var addVar=data.addVar;         // get custom additional data
                    alert('Area '+id+' clicked.'+'
     
    nm: '+nm+'
    value: '+value+'
    color: '+color+'
    custom data: '+addVar);
                }
            }
        },
        group:{                                     // setting grouping region
            'asia':                                 // groupId - group value that match groupId option that set in each region
            {
                nm:'Very Good',                     // set name for each group region that display in legend
                color:'#11ff11'                     // set fill color for grouping region
            }
        }
    }